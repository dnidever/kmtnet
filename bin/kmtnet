#!/usr/bin/env python

import os
import sys
import numpy as np
import warnings
from astropy.io import fits
from astropy.utils.exceptions import AstropyWarning
from astropy.wcs import WCS
import time
import shutil
import re
import subprocess
import glob
import logging
import socket
from datetime import datetime
from argparse import ArgumentParser
import traceback
from kmtnet import utils
import prometheus as pm

if __name__ == "__main__":

    # Run measurement on one full KMTNet image
    parser = ArgumentParser(description='Run measurement on one KMTNet image')
    parser.add_argument('filename', type=str, nargs=1, help='Absolute flux filename')
    parser.add_argument('--host',type=str,nargs=1,default="tempest",help='hostname ("tempest","tempest_group","gp09/7","tacc")')
    parser.add_argument('--stagger',type=int, nargs=1, default=0, help='Stagger time')
    parser.add_argument('-r','--redo', action='store_true', help='Redo exposures that were previously processed')
    args = parser.parse_args()

    # Inputs
    if isinstance(args.host,list):
        host = args.host[0]
    else:
        host = args.host
    if host=="None": host = None
    if isinstance(args.stagger,list):
        stagger = args.stagger[0]
    else:
        stagger = args.stagger
    redo = args.redo                         # if called, redo = True
    print("host =",host)
    print("stagger =",stagger)
    print("redo =",redo)

    # File names
    filename = args.filename
    if type(filename) is list:
        filename = filename[0]

    # Check that the files exist
    if os.path.exists(filename) is False:
        print(filename+" file NOT FOUND")
        sys.exit()

    # Stagger time
    if stagger > 0:
        sleeptime = np.random.randint(1,stagger)
        print('Sleeping {:} seconds'.format(sleeptime))
        time.sleep(sleeptime)


    # Output directory
    basedir,tmpdir = utils.getdirs(host)
    base = os.path.basename(filename)
    base = os.path.splitext(base)[0]
    head0 = fits.getheader(filename,0)
    dateobs = head0.get("DATE-OBS")
    night = dateobs[0:4]+dateobs[5:7]+dateobs[8:10]
    outdir = os.path.join('/home/x51j468/kmtnet/',night,base)
    if os.path.exists(outdir)==False:
        os.makedirs(outdir)
        
    # Start keeping time                                                                                      
    t0 = time.time()

    print('Running Prometheus on '+filename)
    print('')
    
    hdu = fits.open(filename)
    for i in np.arange(1,5):
        print('Processing chip {:d}'.format(i))
        print('------------------')
        w = WCS(hdu[i].header)
        im = pm.ccddata.CCDData(hdu[i].data,header=hdu[i].header,wcs=w)
        im.bin(2,tot=True)
        out,model,sky,psf = pm.run(im,verbose=True,psfname='penny',lookup=True,lorder=1)

        outfile = os.path.join(outdir,base+'_{:02d}_pm.fits'.format(i))
                
        # Save the output
        print('Writing output to '+outfile)
        if os.path.exists(outfile): os.remove(outfile)
        hdulist = fits.HDUList()
        hdulist.append(fits.table_to_hdu(out))  # table
        hdulist[1].header['EXTNAME'] = 'SOURCE TABLE'
        hdulist[0].header['COMMENT']='Prometheus version '+str(pm.__version__)
        hdulist[0].header['COMMENT']='Date '+datetime.now().ctime()
        hdulist[0].header['COMMENT']='File '+f
        hdulist[0].header['COMMENT']='HDU#0 : Header Only'
        hdulist[0].header['COMMENT']='HDU#1 : Source catalog'
        hdulist[0].header['COMMENT']='HDU#2 : Model image'
        hdulist[0].header['COMMENT']='HDU#3 : Sky model image'
        hdulist[0].header['COMMENT']='HDU#4 : PSF model'
        hdulist.append(model.tohdu())  # model
        hdulist[2].header['EXTNAME'] = 'MODEL IMAGE'
        hdulist[2].header['COMMENT'] = 'Prometheus model image'
        hdulist.append(sky.tohdu())    # sky
        hdulist[3].header['EXTNAME'] = 'SKY MODEL IMAGE'            
        hdulist[3].header['COMMENT'] = 'Prometheus sky image'
        hdulist += psf.tohdu()    # psf, returns a list
        hdulist.writeto(outfile,overwrite=True)
        hdulist.close()

        import pdb; pdb.set_trace()
        
    
    print("Total time = "+str(time.time()-t0)+" seconds")





