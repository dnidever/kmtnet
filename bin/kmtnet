#!/usr/bin/env python

import os
import sys
import numpy as np
import warnings
from astropy.io import fits
from astropy.utils.exceptions import AstropyWarning
import time
import shutil
import re
import subprocess
import glob
import logging
import socket
from datetime import datetime
from argparse import ArgumentParser
import traceback
from kmtnet import utils
from kmtnet.kmtnet import Exposure

if __name__ == "__main__":

    # Run measurement on one full KMTNet image
    parser = ArgumentParser(description='Run measurement on one NSC InstCal image')
    parser.add_argument('filename', type=str, nargs=1, help='Absolute flux filename')
    parser.add_argument('--host',type=str,nargs=1,default="tempest",help='hostname ("tempest","tempest_group","gp09/7","tacc")')
    parser.add_argument('--stagger',type=int, nargs=1, default=0, help='Stagger time')
    parser.add_argument('-r','--redo', action='store_true', help='Redo exposures that were previously processed')
    args = parser.parse_args()

    # Inputs
    if isinstance(args.host,list):
        host = args.host[0]
    else:
        host = args.host
    if host=="None": host = None
    if isinstance(args.stagger,list):
        stagger = args.stagger[0]
    else:
        stagger = args.stagger
    redo = args.redo                         # if called, redo = True
    print("host =",host)
    print("stagger =",stagger)
    print("redo =",redo)
    
    # Get directories
    basedir, tmpdir = utils.getdirs(host)
    print("Working in basedir,tmpdir = ",basedir,tmpdir)
    # Make sure the directories exist                                                                         
    if not os.path.exists(basedir):
        os.makedirs(basedir)
    if not os.path.exists(tmpdir):
        # try/except to handle race condition
        try:
            os.makedirs(tmpdir)
        except:
            pass

    # File names
    filename = args.filename
    if type(filename) is list:
        filename = filename[0]

    # Check that the files exist
    if os.path.exists(filename) is False:
        print(filename+" file NOT FOUND")
        sys.exit()

    # Stagger time
    if stagger > 0:
        sleeptime = np.random.randint(1,stagger)
        print('Sleeping {:} seconds'.format(sleeptime))
        time.sleep(sleeptime)
        
    # Start keeping time                                                                                      
    t0 = time.time()

    # Create the Exposure object
    exp = Exposure(filename,host=host)

    # Check if the output files already exist
    if redo==False and os.path.exists(exp.outdir):
        outfile = os.path.join(exp.outdir,exp.base+'_meas.fits')
        if os.path.exists(outfile):
            print(outfile,' output file already exists.  Use --redo to overwrite.')
            sys.exit()
    if redo and os.path.exists(exp.outdir):
        print('Removing old output directory ',exp.outdir)
        shutil.rmtree(exp.outdir)

    # Run
    try:
        exp.run()
    except:
        traceback.print_exc()
        print('Problem running exposure')

    # Always delete temporary files
    try:
        print('Deleting temporary directory',tmpdir)
        shutil.rmtree(tmpdir)
    except:
        traceback.print_exc()
        print('Problems deleting temporary directory',tmpdir)
    
    print("Total time = "+str(time.time()-t0)+" seconds")





